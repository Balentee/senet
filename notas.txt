TABULEIRO:

3 linhas
10 colunas
3 x 10 = 30 quadrados

direcao peças:
    1º linha: --->
    2º linha: <---
    3º linha: --->

coordenadas
primeira e ultima de cada linha:
    1º linha: 0,0 e 0,9
    2º linha: 1,9 e 1,0
    3º linha: 2,0 e 2,9

esquema

0.0 /1.0 /2.0 /3.0 /4.0 /5.0 /6.0 /7.0 /8.0 /9.0
0.1 /1.1 /2.1 /3.1 /4.1 /5.1 /6.1 /7.1 /8.1 /9.1
0.2 /1.2 /2.2 /3.2 /4.2 /5.2/6.2 /7.2 /8.2 /9.2

Casas especiais
    5.1 -> a Casa da Segunda Vida
    5.2 -> a Casa da Beleza
    6.2 -> a Casa da Humilhação (ou a Casa das Águas),
    7.2 -> a Câmara dos Três Juízes (III),
    8.2 -> a Casa dos Dois Juízes (II) e
    9.2 -> a Casa de Heru (Hórus) (I).


# resize shit:
    else:
        display_text("Press esc to menu", arial, white, 0, 0)
        # ok esta parte é preciso mesmo comentar:
        # basicamente esta parte do codigo permite alterar o tamanho da janela e manter o tabuleiro centrado
        # os numeros estranhos são a 'razão' para que fiquem sempre centrados em relacao à janela
        window.blit(tabuleiro_img, (width - width/1.3435969209237228831350594821554, height - height/1.5232722143864598025387870239774))

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                if not game_pause:  # se o jogo nao está pausado
                    game_pause = True  # se clicar esc pausa
                else:           # se estiver pausado
                    game_pause = False  # esc volta ao jogo
        if event.type == VIDEORESIZE:
            width, height = event.w, event.h
            tabuleiro_img = pygame.transform.scale(tabuleiro_img, (width/1.8532818532818532818532818532819, height/3.0769230769230769230769230769231))
________________________________________________________________________________________________________________________



________________________________________________________________________________________________________________________

plano para 'check_cone':

1º - Geral: se postition[x] + n (n=numero dos paus)
    - se sitio esta vazio:
        ocupar
    - se esta ocupado por branca:
        nao da para ir
    - se estiver ocupado pela preta
        trocar de sitio

COMO RESOLVER PROBLEMA DA 2º LINHA
colocar if para se for > 9 subtrai o resto na posicao abaixo mas na linha 2 andando
assim para trás!
depois se ficar menor que 0, adiciona na posicao abaixo mas na linha 3

de linha 2 para linha 3
imagina que estas em (1,1) e tens 5 casas para andar
vais passar para o sitio (3,2)
                            |-> vai se fazer: (1 - 5 + 9) - 1 = 5 - 1 = 4
se tiveres no (0,1) e sair 1 vais ter de ir para o (0,2)

PARA 3 IN A ROW

fazer um for que teste o nº de casas à frente da peça que se vai mover do genero:
for "cada casa a frente da peça" em "numero de jogadas":
    if "ccfp" == exemplo: "brancas"
        3_in_a_row += 1
    else
        3_in_a_row = 0
        break

________________________________________________________________________________________________________________________
check cone se der merda

def check_cone(position):
    moves_list = []
    n = throw_sticks()  # number of moves = n

    # se linha 1 ou 3
    if position[1] == 0 or position[1] == 2:
        # se não há nenhuma peça no quadrado em que o cone calha
        if (position[0] + n, position[1]) not in white_location and \
                (position[0] + n, position[1]) not in black_location:
            # se for passar da linha 1 para linha 2 do tabuleiro
            if position[0] + n > 9:
                linechange = (position[0] + n - 9) - 1  # mais 1 devido a se andar 1 em y e nao em x("quadrado inv")
                moves_list.append((position[0] - linechange, position[1] + 1))
            # sem trocas de linha:
            else:
                moves_list.append((position[0] + n, position[1]))

        # se há uma peça preta no quadrado em que o cone calha
        if (position[0] + n, position[1]) in black_location:
            # se for passar da linha 1 para linha 2 do tabuleiro
            if position[0] + n > 9:
                linechange = (position[0] + n - 9) - 1  # mais 1 devido a se andar 1 em y e nao em x("quadrado inv")
                moves_list.append((position[0] - linechange, position[1] + 1))
            # sem trocas de linha:
            else:
                moves_list.append((position[0] + n, position[1]))
________________________________________________________________________________________________________________________

quando se precisar de dizer que não se pode dar swap por exemplo aqui:
if (position[0] + n, position[1]) not in black_location:

crias as condicões com not in white location

exemplo: se estiver naquela casa da 2 ou uma preta ou uma branca nao se pode dar
swap entao imaginemos que:

    - vez da branca e ta uma peça na casa jesus(da 2º vida)

if (position[0] + n, position[1]) in white_location and (position[0] + n, position[1]) in black_location: # significa - if esta qualquer peça lá
    if position[0] == 5:
        d

PARA BOT:
    muito facil depois de ficar "oh fuck" durante 3 segundos até me vir à ideia a solução suprema :)))

    bot em vez de clicar, tem click_coords randomizado conforme as suas opões válidas :)

    if game_w_bot == True:
        if turn >= bot_turn:
               click_coords = random.randin(black locations)
        if turn < bot_turn:
                click_coords = random.randin(white locations)

        e depois
        click coords = validmoves da peça que escolheu

for i in black locations:

########################################################################################################################
se eu conseguir imprimir todas as casas que podem influenciar um 3 ou 2 com o n...
e se pairs e threes retornar um array com as casas de pares e impares, depois é check se a posição é uma delas

position[0] + n
########################################################################################################################
def two_in_a_row(n, position, turn):
    # a funcao deve ser capaz de retornar false se for possivel saltar o pair, pois este n influencia isso
    there_are = 0
    maxim = n + 1  # n + 1, pois a casa onde calha o n pode ser a primeira peça de um par, entao tem de ler essa + 1
    # for i in maxim porque maxim é o num de casas à frente que pode influenciar a jogada com um par
    for i in range(maxim):
        i += 1
        if turn == 'cone':
            # se linha 1
            if position[1] == 0:
                # se passar de linha e tiver um par:
                if (position[0] + i) > 9:
                    linechange = (position[0] + i - 9) - 1  #TODO rever condicao aqui
                    if (9 - linechange, position[1] + 1) in black_location:
                        there_are += 1
                # se estiver na mesma linha e tiver par
                if 0 <= position[0] + i <= 9:
                    if (position[0] + i, position[1]) in black_location:
                        there_are += 1
                # não há par? entao reinicializar na variavel
                else:
                    there_are = 0
            # se linha 2
            if position[1] == 1:
                if (position[0] - i, position[1]) in black_location:
                    there_are += 1
                else:
                    there_are = 0  # se estiverem separados volta ao 0 e mais importante, se conseguir saltar o par dá false
            # se linha 3
            if position[1] == 2:
                if (position[0] + i, position[1]) in black_location:
                    there_are += 1
                else:
                    there_are = 0

        if turn == 'spool':
            # se linha 1
            if position[1] == 0:
                # se passar de linha e tiver um par:
                if (position[0] + i) > 9:
                    linechange = (position[0] + i - 9) - 1  # TODO rever condicao aqui
                    if (9 - linechange, position[1] + 1) in white_location:
                        there_are += 1
                # se estiver na mesma linha e tiver par
                if 0 <= position[0] + i <= 9:
                    if (position[0] + i, position[1]) in white_location:
                        there_are += 1
                # não há par? entao reinicializar na variavel
                else:
                    there_are = 0
            # se linha 2
            if position[1] == 1:
                if (position[0] - i, position[1]) in white_location:
                    there_are += 1
                else:
                    there_are = 0  # se estiverem separados volta ao 0 e mais importante, se conseguir saltar o par dá false
            # se linha 3
            if position[1] == 2:
                if (position[0] + i, position[1]) in white_location:
                    there_are += 1
                else:
                    there_are = 0


    if there_are >= 2:
        return True
    if there_are < 2:
        return False

########################################################################################################################
def three_in_a_row(n, position, turn):
    # tres seguidos? mal pela raiz, logo false
    there_are = 0
    for i in range(7):
        i += 1
        if turn == 'cone':
            # se linha 2
            if position[1] == 2:
                if (position[0] - i, position[1]) in black_location:
                    there_are += 1
                    if there_are >= 3:
                        return True
                else:
                    there_are = 0
            else:
                if (position[0] + i, position[1]) in black_location:
                    there_are += 1
                    if there_are >= 3:
                        return True
                else:
                    there_are = 0
        if turn == 'spool':
            if position[1] == 2:
                if (position[0] - i, position[1]) in white_location:
                    there_are += 1
                    if there_are >= 3:
                        return True
                else:
                    there_are = 0
            else:
                if (position[0] + i, position[1]) in white_location:
                    there_are += 1
                    if there_are >= 3:
                        return True
                else:
                    there_are = 0

    if there_are < 3:
        return False
















